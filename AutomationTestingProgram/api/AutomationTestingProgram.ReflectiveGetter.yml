### YamlMime:ManagedReference
items:
- uid: AutomationTestingProgram.ReflectiveGetter
  commentId: T:AutomationTestingProgram.ReflectiveGetter
  id: ReflectiveGetter
  parent: AutomationTestingProgram
  children:
  - AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType``1(System.Object[])
  - AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType``1(System.Object[])
  langs:
  - csharp
  - vb
  name: ReflectiveGetter
  nameWithType: ReflectiveGetter
  fullName: AutomationTestingProgram.ReflectiveGetter
  type: Class
  source:
    remote:
      path: AutomationTestingProgram/src/ReflectiveGetter.cs
      branch: development
      repo: git@github.com:zzzrst/AutomationTestingProgram.git
    id: ReflectiveGetter
    path: src/ReflectiveGetter.cs
    startLine: 16
  assemblies:
  - AutomationTestingProgram
  namespace: AutomationTestingProgram
  summary: "\nClass to get test action using reflection.\n"
  example: []
  syntax:
    content: public class ReflectiveGetter
    content.vb: Public Class ReflectiveGetter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType``1(System.Object[])
  commentId: M:AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType``1(System.Object[])
  id: GetEnumerableOfType``1(System.Object[])
  parent: AutomationTestingProgram.ReflectiveGetter
  langs:
  - csharp
  - vb
  name: GetEnumerableOfType<T>(Object[])
  nameWithType: ReflectiveGetter.GetEnumerableOfType<T>(Object[])
  fullName: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType<T>(System.Object[])
  type: Method
  source:
    remote:
      path: AutomationTestingProgram/src/ReflectiveGetter.cs
      branch: development
      repo: git@github.com:zzzrst/AutomationTestingProgram.git
    id: GetEnumerableOfType
    path: src/ReflectiveGetter.cs
    startLine: 24
  assemblies:
  - AutomationTestingProgram
  namespace: AutomationTestingProgram
  summary: "\nGets a list of all subclasses of base class T using reflection.\n"
  example: []
  syntax:
    content: >-
      public static List<T> GetEnumerableOfType<T>(params object[] constructorArgs)
          where T : class
    parameters:
    - id: constructorArgs
      type: System.Object[]
      description: The constructorArgs<xref href="object%5b%5d" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: The generic type T to be used.
    return:
      type: System.Collections.Generic.List{{T}}
      description: <xref href="System.Collections.Generic.List%601" data-throw-if-not-resolved="false"></xref> found.
    content.vb: Public Shared Function GetEnumerableOfType(Of T As Class)(ParamArray constructorArgs As Object()) As List(Of T)
  overload: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType*
  nameWithType.vb: ReflectiveGetter.GetEnumerableOfType(Of T)(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType(Of T)(System.Object())
  name.vb: GetEnumerableOfType(Of T)(Object())
- uid: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType``1(System.Object[])
  commentId: M:AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType``1(System.Object[])
  id: GetImplementationOfType``1(System.Object[])
  parent: AutomationTestingProgram.ReflectiveGetter
  langs:
  - csharp
  - vb
  name: GetImplementationOfType<T>(Object[])
  nameWithType: ReflectiveGetter.GetImplementationOfType<T>(Object[])
  fullName: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType<T>(System.Object[])
  type: Method
  source:
    remote:
      path: AutomationTestingProgram/src/ReflectiveGetter.cs
      branch: development
      repo: git@github.com:zzzrst/AutomationTestingProgram.git
    id: GetImplementationOfType
    path: src/ReflectiveGetter.cs
    startLine: 44
  assemblies:
  - AutomationTestingProgram
  namespace: AutomationTestingProgram
  summary: "\nGets a list of all implentation of base class T using reflection.\n"
  example: []
  syntax:
    content: >-
      public static List<T> GetImplementationOfType<T>(params object[] constructorArgs)
          where T : class
    parameters:
    - id: constructorArgs
      type: System.Object[]
      description: The constructorArgs<xref href="object%5b%5d" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: T
      description: The generic type T to be used.
    return:
      type: System.Collections.Generic.List{{T}}
      description: <xref href="System.Collections.Generic.List%601" data-throw-if-not-resolved="false"></xref> found.
    content.vb: Public Shared Function GetImplementationOfType(Of T As Class)(ParamArray constructorArgs As Object()) As List(Of T)
  overload: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType*
  nameWithType.vb: ReflectiveGetter.GetImplementationOfType(Of T)(Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType(Of T)(System.Object())
  name.vb: GetImplementationOfType(Of T)(Object())
references:
- uid: AutomationTestingProgram
  commentId: N:AutomationTestingProgram
  name: AutomationTestingProgram
  nameWithType: AutomationTestingProgram
  fullName: AutomationTestingProgram
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: object[]
  commentId: T:object[]
  isExternal: true
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType*
  commentId: Overload:AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType
  name: GetEnumerableOfType
  nameWithType: ReflectiveGetter.GetEnumerableOfType
  fullName: AutomationTestingProgram.ReflectiveGetter.GetEnumerableOfType
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType*
  commentId: Overload:AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType
  name: GetImplementationOfType
  nameWithType: ReflectiveGetter.GetImplementationOfType
  fullName: AutomationTestingProgram.ReflectiveGetter.GetImplementationOfType
